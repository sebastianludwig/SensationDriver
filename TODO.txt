Check max output frequency -> enough for motor?
connection error reporting (callback/delegate) (and add SHA1 to last DONE comment)
automatic platine layouting..
  - Ask Boris
  - http://smart-prototyping.com/PCB-Prototyping.html

rename Command to Sensation (proto & py)
find way to generate c# classes from .proto files - see TODO below (should work under windows)
multiple types of messages
  - all to 0
  - frequency?
actually drive vibration motor
chain boards (order them first...)
"reset" all actors while no client is connected - and set all to 0 on connect


Kinect
  http://structure.io/openni
  http://rfilkov.com/2013/12/16/kinectps-with-openni-2/
  http://zigfu.com/en/zdk/overview/ ($200)
Wiimote
  http://wiki.unity3d.com/index.php?title=UniWii
Ocolus
  http://paddytherabbit.com/unity3d-oculus-rift-plugin-setup/



DONE
π: SSH
π: VNC (http://edmundofuentes.com/post/45179343394/raspberry-pi-without-keyboard-mouse-nor-screen)
π: Change password
π: Change hostname `sudo nano /etc/hostname` (sensationdriver)
π: Zeroconf aka Bonjour: `sudo apt-get install avahi-daemon` (sensationdriver.local)
π: Configure I2C (https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c)
  - connect 16 channel 12 bit servo driver (http://www.adafruit.com/products/815)
  - add "i2c-bcm2708" and "i2c-dev" to /etc/modules
  - sudo apt-get install "python-smbus" and "i2c-tools"
  - comment out "spi-bcm2708" and "i2c-bcm2708" in /etc/modprobe.d/raspi-blacklist.conf (if it exists)
  -> `sudo i2cdetect -y 1` should detect something (not an empty table, probably 40 & 70)
  - test it (with oszi connected to output 0)
    - `git clone https://github.com/adafruit/Adafruit-Raspberry-Pi-Python-Code.git`
    - `sudo python Adafruit-Raspberry-Pi-Python-Code/Adafruit_PWM_Servo_Driver/Servo_Example.py`
    -> oszi output
π: Backup (http://minordiscoveries.wordpress.com/2013/03/30/backing-up-raspberry-pi-sd-card-on-mac-os-x/)
  - `diskutil list` & `diskutil unmountDisk /dev/disk?`
  - `sudo dd bs=1m if=/dev/rdisk? of=/Volumes/Macintosh\ HD/RaspberryPi/sensationdriver_0X_.img`
  - compressed: `sudo dd bs=1m if=/dev/rdisk? | gzip > /Volumes/Macintosh\ HD/RaspberryPi/sensationdriver_0X_.img.gz`
  - restore: `gzip -dc /Volumes/Macintosh\ HD/RaspberryPi/sensationdriver_0X_.img.gz | sudo dd bs=1m of=/dev/rdisk?`

py: basic server & client: transmit multiple messages from c2s (da2b149)
proto: DL v2.5 (https://code.google.com/p/protobuf/downloads/list)
proto: install: ./configure, make, make check, make install (README.txt)
π: Install pip (`curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | sudo python`)
py: requirements.txt to add protobuf dependency (`pip install -r requirements.txt` + sudo@π)
proto: command definition (sensationprotocol.proto) (b7dc8d6)
py: send and receive proto command message (a9f20e9)
py: Add Adafruit PWM driver library (https://learn.adafruit.com/adafruit-16-channel-servo-driver-with-raspberry-pi/library-reference) (64980c0)
π: Sync project files `rsync -ar -e "ssh -l pi" --exclude 'lib' --exclude 'include' --exclude='.*' ~/projects/SensationDriver/ sensationdriver.local:/home/pi/projects/SensationDriver`
py: send command from mac client to π server (bcf0add)

unity: add unity version of protobuf-net.dll to project (check source for examples!)
[unity: write equivalent of command definition in C#] (https://code.google.com/p/protobuf-net/wiki/GettingStarted)
  - TODO: test ProtoGen (Windows only)
unity: send protobuf message from unity to π (37bf2ae)
unity: send message each update with intensity coupled to distance (1d58603)
unity: backport ConcurrentQueue from current Mono version (https://github.com/mono/mono/) to work with Unity
unity: implemented probe (with custom editor) and client (http://www.albahari.com/threading/ & http://csharpindepth.com/articles/general/singleton.aspx)


Outline
Introduction
  haptic vs tactile
Motivation
Others
  [Transfer list from collected links]
Actors
  Vibration
    Nerves
    Placement -> see accupuncture points?
  EMS/TENS (TENS is for pain relieve)
    Musscles
      3 types (http://www.mhhe.com/biosci/genbio/virtual_labs_2K8/labs/BL_13/index.html)
    Placement (http://commons.wikimedia.org/wiki/Transkutane_elektrische_Nervenstimulation?uselang=de)
Hardware choices
  Raspberry Pi
  I2C Bus
  Extension Board (16x12 Bit PWM http://www.adafruit.com/products/815 + highlightings in PCA9685 datasheet)
    - PWM must be set 8 LSBits + 4 MSBits separately
    - extra transistor to decouple chip from current drawn by actors
Software choices
  Unity3D
  Protobuf
    Overview http://talks.spline.de/slides/protobuf.pdf
    Why? (alt. HTTP & JSON-POST)
      - fast
      - pretty much every language
    protobuf-net
      - comes with precompiled Unity3D DLL
Implementation
  Protocol
    4 byte integer message size (big endian)
    Command message (just plenty of them)
  Driver
  Unity3D
    Client
      - singleton (http://csharpindepth.com/articles/general/singleton.aspx - version 4)
      - SendSensationAsync adds to ConcurrentQueue
      - separate thread sends items in queue (Transmit()->ProcessingLoop() method)
        - background thread to not keep the application running on exit
        - started by Connect()
        - Join()ed by Disconnect()
        - consumer-prodcer-pattern? implemented using an EventWaitHandle
    Probe
      - component (MonoBehaviour) to be attachable to any object
      - casts ray in direction (object space), with max distance
        - custom unity editor script for easy manipulation
      - intensity curve (0-1, min to max reach)
      - different out of reach modes
      - update modes (continuously or only when intensity changed)
      - sends sensation to driver via Client
    Hub
      - convenience for client settings through Unity-Editor
      - performs connect & disconnect